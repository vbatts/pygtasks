#!/usr/bin/env python
# pygtasks (Python Google Task client)
#
# Copyright 2011  Vincent Batts, Vienna, VA, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# stdlib libraries
import sys
import os
import logging
from optparse import OptionParser

# Setup our path, if this is running from the src directory
fpath = os.path.join(os.path.dirname(os.path.abspath(__file__)),"../lib")
if os.path.exists(fpath):
    sys.path.insert(0,fpath)

# Our stuff
from pygtasks import pygservice
from pygtasks import pygtask
#from pygtasks.pygclient import pygclient # XXX not used yet


##== Setup
logger = logging.getLogger('pygtasks')


##== Functions
def parse_args(args):
    # We'll put this first, so we can parse before constructing the [would be] client
    parser = OptionParser()
    parser.add_option("-L", dest="showLists", default=False,
                    action="store_true", help="Display the task lists available")
    parser.add_option("-l", "--list", dest="selectedList", default=False,
                    action="store", type="string", help="Select List. Use -L to see lists available,\
		    or say \"all\" to view everything. Default is your default task list.")
    parser.add_option("-c", "--color", dest="color", default=False,
                    action="store_true", help="Colored Output")
    parser.add_option("-d", "--debug", dest="debug", default=False,
                    action="store_true", help="enable debugging output")
    return parser.parse_args(args)

def findIndentation(tasks, task):
    if not task.has_key('parent'):
        return 0

    def m(t):
        return t['id'] == task['parent']

    return findIndentation(tasks, filter(m,tasks)[0]) + 1
    
def get_tasklist_id_by_title(items, title):
    for item in items:
        if item['title'] == title:
            return item['id']

def main(args):

    # Gather the user config, and reach out to Google.
    service = pygservice().start()

    (options, args) = parse_args(args)

    if options.debug:
        logger.setLevel(logging.DEBUG)


    logger.debug("foo")

    normal = '\033[1;m'
    bcyan = normal
    cyan = normal
    
    if options.color:
        bcyan = '\033[1;36m'
        cyan = '\033[0;36m'
    
    '''
        NOTES:
        * Dynamic pydoc available at http://api-python-client-doc.appspot.com/tasks/v1
        * This 'service' is a apiclient.discovery.Resource
          and responds to tasklists() and tasks()
        * The tasklists() responds to delete(), insert(), get(), list(),
          patch(), and update()
        * while just iterating to show the tasks is neat, we'll need a class 
          to describe a task, like a node of a tree, to reference parent tasks,
          and have proper position in the list.


        A typical "task" (using lots of functionality), looks like:
        {   u'id': u'<redacted hash>',
                      u'kind': u'tasks#task',
                      u'position': u'00000000000000001388',
                      u'notes': u'Sitting in the basket',
                      u'selfLink': u'https://www.googleapis.com/tasks/v1/lists/<redacted hash>/tasks/<redacted hash>',
                      u'status': u'needsAction',
                      u'title': u'library book drop off',
                      u'due': u'2011-09-07T00:00:00.000Z',
                      u'updated': u'2011-08-14T15:55:36.625Z'}
    '''

    # TODO XXX
    # * move this into a class
    # * implement templates for the output
    # http://docs.python.org/library/string.html#template-strings

    # Default is to show @default list
    if (not options.selectedList and not options.showLists):
        # Get the default list
        tasklist = service.tasklists().get(tasklist='@default').execute()
        logger.debug(tasklist)

        tasks = service.tasks().list(tasklist=tasklist['id']).execute()
        logger.debug(tasks)

        print cyan + tasklist['title'] + normal
    
        for task in tasks['items']:
            if task['title'] != '':
                ident = findIndentation(tasks['items'], task)
                print "  "*ident + task['title']
    
        logger.debug(tasks['items'])
    else:
        # Print a list header
        if options.selectedList == "all" or options.showLists == True:
            print bcyan + 'Task Lists:' + normal
            print
    
        # Get the list
        tasklists = service.tasklists().list().execute()
        logger.debug(tasklists)

        # Otherwise, iterate
        for tasklist in tasklists['items']:
            if options.showLists == True:
                print cyan + '"' + tasklist['title'] + '"' + normal
                continue
    
            if options.selectedList == tasklist['title'] or options.selectedList == "all":
                tasks = service.tasks().list(tasklist=tasklist['id']).execute()
                logger.debug(tasks)

                print cyan + tasklist['title'] + normal
    
                for task in tasks['items']:
                    if task['title'] != '':
                        ident = findIndentation(tasks['items'], task)
                        print "  "*ident + task['title']

            print


if __name__ == '__main__':
    main(sys.argv[1:])
